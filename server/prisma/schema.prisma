// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String               @id @default(uuid())
  firstName              String               @db.VarChar(50)
  middleName             String?              @db.VarChar(50)
  lastName               String               @db.VarChar(50)
  suffix                 String?              @db.VarChar(15)
  username               String               @unique @db.VarChar(15)
  emailAddress           String               @unique @db.VarChar(320)
  contactNumber          String               @unique @db.VarChar(15)
  password               String
  isVerified             Boolean              @default(false)
  companyName            String?
  verifyToken            String               @unique
  resetToken             String?              @unique
  type                   User_Type            @default(SUPERADMIN)
  status                 User_Status          @default(ACTIVE)
  image                  String?              @unique
  quotations             Quotation[]
  quotationLogs          Quotation_Log[]
  project                Project[]
  projectLogs            Project_Log[]
  purchaseOrderLogs      Purchase_Order_Log[]
  preparedPurchaseOrders Purchase_Order[]     @relation("preparedBy")
  approvedPurchaseOrders Purchase_Order[]     @relation("approvedBy")
  proofOfPayment         Proof_Of_Payment[]
  notifications          Notification[]
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

model Quotation {
  id                      String                   @id @default(uuid())
  projectTitle            String?                  @unique @db.VarChar(255)
  projectType             Project_Type
  buildingType            Building_Type
  establishmentSizeWidth  Decimal
  establishmentSizeHeight Decimal
  projectFeatures         Project_Features[]
  floorPlan               String                   @unique // file name
  quotationStatus         Project_Quotation_Status @default(FOR_REVIEW)
  materialsCost           Decimal?                 @db.Money
  laborCost               Decimal?                 @db.Money
  requirementsCost        Decimal?                 @db.Money
  quotation               String?                  @unique // file name
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  String
  project                 Project?
  quotationLogs           Quotation_Log[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Quotation_Log {
  id          String    @id @default(uuid())
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  entry       String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Supplier {
  id                 String             @id @default(uuid())
  name               String             @db.VarChar(255)
  phone              String             @db.VarChar(15)
  landline           String             @db.VarChar(15)
  contacts           Supplier_Contact[]
  address            Supplier_Address   @relation(fields: [supplier_AddressId], references: [id])
  note               String             @db.VarChar(255)
  purchaseOrder      Purchase_Order[]
  supplier_AddressId String             @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Supplier_Contact {
  id           String    @id @default(uuid())
  firstName    String    @db.VarChar(50)
  lastName     String    @db.VarChar(50)
  emailAddress String    @unique @db.VarChar(50)
  phone        String    @unique @db.VarChar(15)
  supplier     Supplier? @relation(fields: [supplierId], references: [id])
  supplierId   String?
}

model Supplier_Address {
  id       String    @id @default(uuid())
  street   String    @db.VarChar(255)
  suite    String    @db.VarChar(255)
  city     String    @db.VarChar(255)
  province String    @db.VarChar(255)
  zipCode  String    @db.VarChar(255)
  supplier Supplier?
}

model Project {
  id                     String                 @id @default(uuid())
  projectStatus          Project_Status         @default(WAITING_CONTRACT)
  paymentStatus          Project_Payment_Status @default(NOT_AVAILABLE)
  quotation              Quotation              @relation(fields: [quotationId], references: [id])
  quotationId            String                 @unique
  contractFileName       String
  signedContractFileName String
  remainingBalance       Decimal                @db.Money
  user                   User                   @relation(fields: [userId], references: [id])
  projectMilestones      Project_Milestone[]
  purchaseOrders         Purchase_Order[]
  projectLogs            Project_Log[]
  proofOfPayment         Proof_Of_Payment[]
  userId                 String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Project_Milestone {
  milestoneNo     Int
  price           Decimal                          @db.Money
  description     String                           @db.VarChar(255)
  estimatedEnd    DateTime
  billingStatus   Project_Milestone_Billing_Status
  milestoneStatus Project_Milestone_Status
  paymentStatus   Project_Payment_Status
  startDate       DateTime
  project         Project                          @relation(fields: [projectId], references: [id])
  projectId       String
  createdAt       DateTime                         @default(now())
  updatedAt       DateTime                         @updatedAt

  @@id(fields: [milestoneNo, projectId], name: "milestoneNo_projectId")
}

model Project_Log {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  entry     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proof_Of_Payment {
  id             String                    @id @default(uuid())
  project        Project                   @relation(fields: [projectId], references: [id])
  user           User                      @relation(fields: [userId], references: [id])
  imageFileName  String
  referenceNo    String
  amount         String
  currentBalance Decimal
  category       Proof_Of_Payment_Category
  milestoneNo    Int?
  dateOfPayment  DateTime
  paymentStatus  Proof_Of_Payment_Status   @default(PENDING)
  projectId      String
  userId         String
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
}

model Purchase_Order {
  id                  String                        @id @default(uuid())
  poNo                String
  project             Project                       @relation(fields: [projectId], references: [id])
  projectId           String
  terms               String
  total               Decimal
  deliverTo           String                        @db.VarChar(255)
  items               Purchase_Order_Item[]
  preparedBy          User                          @relation("preparedBy", fields: [preparedById], references: [id])
  preparedById        String
  approvedBy          User                          @relation("approvedBy", fields: [approvedById], references: [id])
  approvedById        String
  purchaseOrderstatus Project_Purchase_Order_Status
  purchaseOrderLogs   Purchase_Order_Log[]
  supplier            Supplier                      @relation(fields: [supplierId], references: [id])
  supplierId          String
  poDocument          String
  contact             String
  payment             String[]
  paymentProof        String[]
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
}

model Purchase_Order_Item {
  id              String         @id @default(uuid())
  description     String         @db.VarChar(255)
  unit            String         @db.VarChar(255)
  netPrice        Decimal        @db.Money
  quantity        Int
  purchaseOrder   Purchase_Order @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  entry           String?        @db.VarChar(255)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Purchase_Order_Log {
  id              String         @id @default(uuid())
  purchaseOrder   Purchase_Order @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  entry           String         @db.VarChar(255)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Application {
  id                   String  @id @default(uuid())
  appName              String  @unique @db.VarChar(50)
  companyName          String  @unique @db.VarChar(50)
  companyAddress       String  @unique @db.VarChar(255)
  companyContactNumber String  @unique @db.VarChar(15)
  companyEmailAddress  String  @unique @db.VarChar(255)
  logoPath             String? @unique @db.VarChar(255)
  faviconPath          String? @unique @db.VarChar(255)
  headerPath           String? @unique @db.VarChar(255)
}

model Notification {
  id          String              @id @default(uuid())
  origin      Notification_Origin
  title       String              @db.VarChar(255)
  body        String              @db.VarChar(255)
  isRead      Boolean             @default(false)
  quotationId String?
  projectId   String?
  user        User?               @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model Carousel {
  id          String          @id @default(uuid())
  title       String          @db.VarChar(255)
  description String          @db.VarChar(255)
  status      Carousel_Status
  imgPath     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Contact {
  id           String          @id @default(uuid())
  subject      Contact_Subject
  fullName     String          @db.VarChar(255)
  companyName  String          @db.VarChar(255)
  emailAddress String          @db.VarChar(320)
  message      String          @db.VarChar(2048)
  isReplied    Boolean         @default(false)
  createdAt    DateTime        @default(now())
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Activity_Log {
  id       String                @id @default(uuid())
  userRole String
  entry    String
  module   String
  category Activity_Log_Category
  loggedAt DateTime              @default(now())
  status   Activity_Log_Status
}

enum User_Type {
  CLIENT
  ACCOUNTING
  ADMIN
  SUPERADMIN
}

enum User_Status {
  ACTIVE
  INACTIVE
}

enum Project_Type {
  INSTALLATION
  MAINTENANCE
}

enum Building_Type {
  COMMERCIAL
  RESIDENTIAL
}

enum Project_Features {
  AUFSS
  WDFHS
  KHFSS
  CDFSS
  FS
  FDAS
  FM2S
  ARFSS
  KHFPS
  DS
  WMS
  DCES
  PS
}

enum Project_Quotation_Status {
  NOT_AVAILABLE
  FOR_REVIEW
  WAITING_OCULAR
  DRAFTING
  CLIENT_APPROVAL
  FOR_APPROVAL
  FOR_REVISION
  APPROVED
  CANCELED
  REJECTED
  REJECTED_QUOTATION
  REJECTED_OCULAR
}

enum Project_Status {
  NOT_AVAILABLE
  WAITING_CONTRACT
  WAITING_SIGNATURE
  WAITING_PAYMENT
  WAITING_APPROVAL
  SET_MILESTONE
  ONGOING
  COMPLETED
  ON_HOLD
  TERMINATED
}

enum Project_Payment_Status {
  NOT_AVAILABLE
  WAITING_APPROVAL
  WAITING_DOWNPAYMENT
  PAID_DOWNPAYMENT
  WAITING_PAYMENT
  PROGRESS_BILLING
  PAID_BILLING
  FULLY_PAID
}

enum Project_Milestone_Status {
  NOT_AVAILABLE
  ONGOING
  DONE
}

enum Project_Milestone_Billing_Status {
  PAID
  UNPAID
}

enum Project_Purchase_Order_Status {
  NOT_AVAILABLE
  FOR_APPROVAL
  APPROVED
  PO_SENT
  PARTIALLY_PAID
  FULLY_PAID
}

enum Proof_Of_Payment_Category {
  MILESTONE
  DOWNPAYMENT
  OTHERS
}

enum Proof_Of_Payment_Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Notification_Origin {
  QUOTATION
  PROJECT
}

enum Carousel_Status {
  ACTIVE
  INACTIVE
}

enum Contact_Subject {
  SCHEDULE_APPOINTMENT
  SUGGESTION
  SERVICE_RELATED_INQUIRY
  PARTNERSHIP_COLLABORATION
  JOB_OPPORTUNITIES
}

enum Activity_Log_Category {
  CREATE
  UPDATE
  DELETE
  AUTH
  PRINT
  OTHERS
}

enum Activity_Log_Status {
  SUCCEEDED
  FAILED
}
